; Setup KeySets to define a namespace
(env-data {
  "namespace-keyset": {
    "keys": [],
    "pred": "keys-all"
  },
  "test-keyset": {
    "keys": [],
    "pred": "keys-all"
  }
})

; Setup namespace
(begin-tx)
(define-namespace "free" (read-keyset "test-keyset") (read-keyset "namespace-keyset"))
(commit-tx)

(env-data {
 "stake-for-steak-keyset": {
   "keys": [
     "stake-for-steak-public-key"
   ],
   "pred": "keys-all"
 }
})

(env-sigs [{
  "key": "stake-for-steak-public-key",
  "caps": []
}])

(begin-tx)
(load "root/fungible-v2.pact")
(load "root/fungible-xchain-v1.pact")
(load "root/coin-v5.pact")
(load "stake-for-steak.pact")
(create-table coin.coin-table)
(create-table coin.allocation-table)
(commit-tx)

; (verify "free.stake-for-steak")

; Setup stake-owner-initial-balance
(env-data {
 "stake-owner-keyset": { "keys": [ "stake-owner-public-key" ], "pred": "keys-all" },
 "staker-keyset": { "keys": [ "staker-public-key" ], "pred": "keys-all" },
 "tulsi-keyset": { "keys": [ "tulsi-public-key" ], "pred": "keys-all" }
})
(env-keys ["stake-owner-public-key", "staker-public-key"])
(begin-tx)
(test-capability (coin.COINBASE))
(coin.coinbase "stake-owner" (read-keyset "stake-owner-keyset") 1000.0)
(coin.coinbase "staker" (read-keyset "staker-keyset") 1000.0)
(coin.coinbase "tulsi-account" (read-keyset "tulsi-keyset") 1000.0)
(commit-tx)
(env-data {})
(env-keys [])

; Test creation of a stake
(env-data { "stake-owner-keyset": { "keys": [ "stake-owner-public-key" ], "pred": "keys-all" } })
(env-sigs [{
  "key": "stake-owner-public-key",
  "caps": [
    (coin.TRANSFER "stake-owner" "stake-owner-tulsi-stake" 50.0)
  ]
}])
(begin-tx)
(free.stake-for-steak.create-stake "tulsi-stake" "tulsi-account" "stake-owner" (read-keyset "stake-owner-keyset") 50.0)
(expect
  "Stake to be created"
  { "name"     : "tulsi-stake"
  , "merchant" : "tulsi-account"
  , "owner"    : "stake-owner"
  , "stake"    : 50.0
  , "stakers"  : ["stake-owner"]
  , "balance"  : 50.0 }
  (free.stake-for-steak.get-stake "tulsi-stake"))
(expect
  "Stake escrow to have 50.0 coins"
  50.0
  (coin.get-balance "stake-owner-tulsi-stake"))
(commit-tx)
(env-data {})
(env-sigs [])

; Test that the escrow account can't be plundered by the owner
(env-sigs [{
  "key": "stake-owner-public-key",
  "caps": [
    (coin.TRANSFER "stake-owner-tulsi-stake" "stake-owner" 50.0)
  ]
}])
(begin-tx)
(expect-failure
  "Stake escrow account can't be plundered by the owner"
  "require-capability: not granted"
  (coin.transfer "stake-owner-tulsi-stake" "stake-owner" 50.0))
(commit-tx)
(env-sigs [])
(env-data {})

; Test funding of a stake
(env-data {
  "staker-keyset": {
    "keys": [
      "staker-public-key"
    ],
    "pred": "keys-all"
  }
})
(env-sigs [{
  "key": "staker-public-key",
  "caps": [
    (coin.TRANSFER "staker" "stake-owner-tulsi-stake" 50.0)
  ]
}])
(begin-tx)
(free.stake-for-steak.fund-stake "tulsi-stake" "staker" (read-keyset "staker-keyset"))
(expect
  "Stake to be created"
  { "name"     : "tulsi-stake"
  , "merchant" : "tulsi-account"
  , "owner"    : "stake-owner"
  , "stake"    : 50.0
  , "stakers"  : ["stake-owner", "staker"]
  , "balance"  : 100.0 }
  (free.stake-for-steak.get-stake "tulsi-stake"))
(expect
  "Stake escrow to have 100.0 coins"
  100.0
  (coin.get-balance "stake-owner-tulsi-stake"))
(commit-tx)
(env-data {})
(env-sigs [])

(begin-tx)
(expect
  "Receive a list of stakers"
  [{ "staker": "stake-owner", "amount": 50.0 }, { "staker": "staker", "amount": 50.0 }]
  (map (lambda (staker) { "staker": (at 'staker staker) , "amount": 50.0 }) (free.stake-for-steak.get-stakers "tulsi-stake" ["stake-owner", "staker"])))
(commit-tx)
(env-data {})
(env-sigs [])

; Test payment
(env-sigs [{
  "key": "stake-owner-public-key",
  "caps": [
    (coin.TRANSFER "stake-owner-tulsi-stake" "tulsi-account" 75.0)
    (free.stake-for-steak.STAKER "tulsi-stake" "stake-owner")
  ]
}])
(begin-tx)
(free.stake-for-steak.pay "tulsi-stake" "stake-owner" 75.0)
(expect
  "Stake to be paid"
  1075.0
  (coin.get-balance "tulsi-account"))
(commit-tx)

; Test refunding a stake
(env-data { "stake-owner-keyset": { "keys": [ "stake-owner-public-key" ], "pred": "keys-all" } })
(env-sigs [{
  "key": "stake-owner-public-key",
  "caps": [
    (coin.TRANSFER "stake-owner" "stake-owner-refund-stake" 50.0)
  ]
}])
(begin-tx)
(free.stake-for-steak.create-stake "refund-stake" "tulsi-account" "stake-owner" (read-keyset "stake-owner-keyset") 50.0)
(commit-tx)
(env-sigs [])
(env-data {})

; Add additional funds from another account
(env-data {
  "staker-keyset": {
    "keys": [
      "staker-public-key"
    ],
    "pred": "keys-all"
  }
})
(env-sigs [{
  "key": "staker-public-key",
  "caps": [
    (coin.TRANSFER "staker" "stake-owner-refund-stake" 50.0)
  ]
}])
(begin-tx)
(free.stake-for-steak.fund-stake "refund-stake" "staker" (read-keyset "staker-keyset"))
(commit-tx)
(env-sigs [])
(env-data {})

; Could this be more elegant?
(env-sigs [{
  "key": "stake-owner-public-key",
  "caps": [
    (coin.TRANSFER "stake-owner-refund-stake" "stake-owner" 50.0)
    (coin.TRANSFER "stake-owner-refund-stake" "staker" 50.0)
    (free.stake-for-steak.STAKER "refund-stake" "stake-owner")
  ]
}])
(begin-tx)
(free.stake-for-steak.refund-stake "refund-stake" "stake-owner")
(expect
  "Stake to be refunded"
  { "name"     : "refund-stake"
  , "merchant" : "tulsi-account"
  , "owner"    : "stake-owner"
  , "stake"    : 50.0
  , "stakers"  : []
  , "balance"  : 0.0 }
  (free.stake-for-steak.get-stake "refund-stake"))
(expect
  "Stakers to be reset to 0.0"
  [
    { "stake": "refund-stake"
    , "staker": "stake-owner"
    , "amount": 0.0 }
    { "stake": "refund-stake"
    , "staker": "staker"
    , "amount": 0.0 }
  ]
  (free.stake-for-steak.get-stakers "refund-stake" ["stake-owner" "staker"]))
(commit-tx)

; Test withdrawing from a stake
(env-data { "stake-owner-keyset": { "keys": [ "stake-owner-public-key" ], "pred": "keys-all" } })
(env-sigs [{
  "key": "stake-owner-public-key",
  "caps": [
    (coin.TRANSFER "stake-owner" "stake-owner-withdraw-stake" 50.0)
  ]
}])
(begin-tx)
(free.stake-for-steak.create-stake "withdraw-stake" "tulsi-account" "stake-owner" (read-keyset "stake-owner-keyset") 50.0)
(commit-tx)
(env-sigs [])
(env-data {})

(env-sigs [{
  "key": "stake-owner-public-key",
  "caps": [
    (coin.TRANSFER "stake-owner-withdraw-stake" "stake-owner" 50.0)
    (free.stake-for-steak.STAKER "withdraw-stake" "stake-owner")
  ]
}])
(begin-tx)
(let ((begin-balance (coin.get-balance "stake-owner")))
  (free.stake-for-steak.withdraw "withdraw-stake" "stake-owner")
  (expect
    "Expect stake owner to have his money back"
    (+ 50.0 begin-balance)
    (coin.get-balance "stake-owner")))
(expect
  "stake to be empty"
  { "name"     : "withdraw-stake"
  , "merchant" : "tulsi-account"
  , "owner"    : "stake-owner"
  , "stake"    : 50.0
  , "stakers"  : []
  , "balance"  : 0.0 }
  (free.stake-for-steak.get-stake "withdraw-stake"))
(commit-tx)
(env-sigs [])
(env-data {})
